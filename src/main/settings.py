"""
Django settings for the project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import redis
from ast import literal_eval
from decouple import config, Csv

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='og6x(+g44yn+vk%a%$=c*n$1$+a%bn8#po1nlf+q()8vg!%^mm')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='', cast=Csv(str))


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': config('DATABASE_ENGINE', default='django.db.backends.postgresql'),
        'NAME': config("DATABASE_NAME", default='palantirmobile'),
        'USER': config("DATABASE_USER", default='palantirmobile'),
        'PASSWORD': config("DATABASE_PASSWORD", default='palantirmobile'),
        'HOST': config("DATABASE_HOST", default='localhost'),
        'PORT': config("DATABASE_PORT", default=5432, cast=int),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = config('STATIC_URL', default='/tmp/static/')
MEDIA_URL = config('MEDIA_URL', default='/tmp/media/')
STATIC_ROOT = config('STATIC_ROOT', default=os.path.join(BASE_DIR, 'static'))
MEDIA_ROOT = config('MEDIA_ROOT', default=os.path.join(BASE_DIR, 'media'))

CELERY_BACKEND = '{}://{}:{}/{}'.format(
    config('CELERY_BACKEND_TYPE', default='redis'),
    config('CELERY_BACKEND_HOST', default='localhost'),
    config('CELERY_BACKEND_PORT', default=6379, cast=int),
    config('CELERY_BACKEND_DATABASE', default=1, cast=int),
)
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default=CELERY_BACKEND)
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default=CELERY_BACKEND)
CELERY_BROKER_TRANSPORT_OPTIONS = config(
    'CELERY_BROKER_TRANSPORT_OPTIONS',
    default=str({'fanout_prefix': True, 'fanout_patterns': True}),
    cast=literal_eval,
)
CELERY_TIMEZONE = TIME_ZONE

FLOWER_BASIC_AUTH = config('FLOWER_BASIC_AUTH', default=None)

# Redis
REDIS_HOST = config('REDIS_HOST', default='localhost')
REDIS_PORT = config('REDIS_PORT', default=6379, cast=int)
REDIS = redis.ConnectionPool(
    host=REDIS_HOST,
    port=REDIS_PORT,
    db=config('REDIS_DB', default=0, cast=int),
)

# configure cache
CACHE_TYPE = config('CACHE_TYPE', default=None)
CACHE_PREFIX = config('CACHE_PREFIX', default='ibesporpromo')
if CACHE_TYPE == 'redis':
    CACHE_REDIS_DB = config('CACHE_REDIS_DB', default=1, cast=int)
    CACHE = {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://{}:{}/{}'.format(REDIS_HOST, REDIS_PORT, CACHE_REDIS_DB),
        'KEY_PREFIX': CACHE_PREFIX,
        'TIMEOUT': config('CACHE_TIMEOUT', default=3600, cast=int),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'MAX_ENTRIES': config('CACHE_MAX_ENTRIES', default=10000, cast=int),
        },
    }
elif CACHE_TYPE == 'locmem':
    CACHE = {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'CACHE_PREFIX': CACHE_PREFIX,
        'LOCATION': 'unique-key-apsl',
    }
else:
    CACHE = {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
    }
CACHES = {'default': CACHE}

SESSION_ENGINE = config('SESSION_ENGINE', default='django.contrib.sessions.backends.cached_db')
SESSION_CACHE_ALIAS = config('SESSION_CACHE_ALIAS', default='default')